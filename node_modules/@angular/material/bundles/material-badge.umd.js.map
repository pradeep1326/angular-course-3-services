{"version":3,"sources":["c:/Users/puttp/Desktop/Angular/workspace/angular-course-3-services/node_modules/@angular/material/bundles/material-badge.umd.js"],"names":[],"mappings":"AAAA;mKAC2E;iJACS;gGAC9C;wCACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2MT,AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAiBA;;;;;;;;;;;;;SAaD;;;;;;;;;;;;;;;;;gDAUC","file":"material-badge.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('@angular/cdk/a11y'), require('tslib'), require('@angular/cdk/coercion'), require('@angular/platform-browser/animations')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/badge', ['exports', '@angular/core', '@angular/material/core', '@angular/cdk/a11y', 'tslib', '@angular/cdk/coercion', '@angular/platform-browser/animations'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.badge = {}), global.ng.core, global.ng.material.core, global.ng.cdk.a11y, global.tslib, global.ng.cdk.coercion, global.ng.platformBrowser.animations));\n}(this, (function (exports, core, core$1, a11y, tslib, coercion, animations) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var nextId = 0;\n    // Boilerplate for applying mixins to MatBadge.\n    /** @docs-private */\n    var MatBadgeBase = /** @class */ (function () {\n        function MatBadgeBase() {\n        }\n        return MatBadgeBase;\n    }());\n    var _MatBadgeMixinBase = core$1.mixinDisabled(MatBadgeBase);\n    /** Directive to display a text badge. */\n    var MatBadge = /** @class */ (function (_super) {\n        tslib.__extends(MatBadge, _super);\n        function MatBadge(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n            var _this = _super.call(this) || this;\n            _this._ngZone = _ngZone;\n            _this._elementRef = _elementRef;\n            _this._ariaDescriber = _ariaDescriber;\n            _this._renderer = _renderer;\n            _this._animationMode = _animationMode;\n            /** Whether the badge has any content. */\n            _this._hasContent = false;\n            _this._color = 'primary';\n            _this._overlap = true;\n            /**\n             * Position the badge should reside.\n             * Accepts any combination of 'above'|'below' and 'before'|'after'\n             */\n            _this.position = 'above after';\n            /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n            _this.size = 'medium';\n            /** Unique id for the badge */\n            _this._id = nextId++;\n            if (core.isDevMode()) {\n                var nativeElement = _elementRef.nativeElement;\n                if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                    throw Error('matBadge must be attached to an element node.');\n                }\n            }\n            return _this;\n        }\n        Object.defineProperty(MatBadge.prototype, \"color\", {\n            /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n            get: function () { return this._color; },\n            set: function (value) {\n                this._setColor(value);\n                this._color = value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"overlap\", {\n            /** Whether the badge should overlap its contents or not */\n            get: function () { return this._overlap; },\n            set: function (val) {\n                this._overlap = coercion.coerceBooleanProperty(val);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"description\", {\n            /** Message used to describe the decorated element via aria-describedby */\n            get: function () { return this._description; },\n            set: function (newDescription) {\n                if (newDescription !== this._description) {\n                    var badgeElement = this._badgeElement;\n                    this._updateHostAriaDescription(newDescription, this._description);\n                    this._description = newDescription;\n                    if (badgeElement) {\n                        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                            badgeElement.removeAttribute('aria-label');\n                    }\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(MatBadge.prototype, \"hidden\", {\n            /** Whether the badge is hidden. */\n            get: function () { return this._hidden; },\n            set: function (val) {\n                this._hidden = coercion.coerceBooleanProperty(val);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the badge is above the host or not */\n        MatBadge.prototype.isAbove = function () {\n            return this.position.indexOf('below') === -1;\n        };\n        /** Whether the badge is after the host or not */\n        MatBadge.prototype.isAfter = function () {\n            return this.position.indexOf('before') === -1;\n        };\n        MatBadge.prototype.ngOnChanges = function (changes) {\n            var contentChange = changes['content'];\n            if (contentChange) {\n                var value = contentChange.currentValue;\n                this._hasContent = value != null && (\"\" + value).trim().length > 0;\n                this._updateTextContent();\n            }\n        };\n        MatBadge.prototype.ngOnDestroy = function () {\n            var badgeElement = this._badgeElement;\n            if (badgeElement) {\n                if (this.description) {\n                    this._ariaDescriber.removeDescription(badgeElement, this.description);\n                }\n                // When creating a badge through the Renderer, Angular will keep it in an index.\n                // We have to destroy it ourselves, otherwise it'll be retained in memory.\n                if (this._renderer.destroyNode) {\n                    this._renderer.destroyNode(badgeElement);\n                }\n            }\n        };\n        /**\n         * Gets the element into which the badge's content is being rendered.\n         * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n         */\n        MatBadge.prototype.getBadgeElement = function () {\n            return this._badgeElement;\n        };\n        /** Injects a span element into the DOM with the content. */\n        MatBadge.prototype._updateTextContent = function () {\n            if (!this._badgeElement) {\n                this._badgeElement = this._createBadgeElement();\n            }\n            else {\n                this._badgeElement.textContent = this.content;\n            }\n            return this._badgeElement;\n        };\n        /** Creates the badge element */\n        MatBadge.prototype._createBadgeElement = function () {\n            var badgeElement = this._renderer.createElement('span');\n            var activeClass = 'mat-badge-active';\n            var contentClass = 'mat-badge-content';\n            // Clear any existing badges which may have persisted from a server-side render.\n            this._clearExistingBadges(contentClass);\n            badgeElement.setAttribute('id', \"mat-badge-content-\" + this._id);\n            badgeElement.classList.add(contentClass);\n            badgeElement.textContent = this.content;\n            if (this._animationMode === 'NoopAnimations') {\n                badgeElement.classList.add('_mat-animation-noopable');\n            }\n            if (this.description) {\n                badgeElement.setAttribute('aria-label', this.description);\n            }\n            this._elementRef.nativeElement.appendChild(badgeElement);\n            // animate in after insertion\n            if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n                this._ngZone.runOutsideAngular(function () {\n                    requestAnimationFrame(function () {\n                        badgeElement.classList.add(activeClass);\n                    });\n                });\n            }\n            else {\n                badgeElement.classList.add(activeClass);\n            }\n            return badgeElement;\n        };\n        /** Sets the aria-label property on the element */\n        MatBadge.prototype._updateHostAriaDescription = function (newDescription, oldDescription) {\n            // ensure content available before setting label\n            var content = this._updateTextContent();\n            if (oldDescription) {\n                this._ariaDescriber.removeDescription(content, oldDescription);\n            }\n            if (newDescription) {\n                this._ariaDescriber.describe(content, newDescription);\n            }\n        };\n        /** Adds css theme class given the color to the component host */\n        MatBadge.prototype._setColor = function (colorPalette) {\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(\"mat-badge-\" + this._color);\n                }\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(\"mat-badge-\" + colorPalette);\n                }\n            }\n        };\n        /** Clears any existing badges that might be left over from server-side rendering. */\n        MatBadge.prototype._clearExistingBadges = function (cssClass) {\n            var element = this._elementRef.nativeElement;\n            var childCount = element.children.length;\n            // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n            while (childCount--) {\n                var currentChild = element.children[childCount];\n                if (currentChild.classList.contains(cssClass)) {\n                    element.removeChild(currentChild);\n                }\n            }\n        };\n        MatBadge.decorators = [\n            { type: core.Directive, args: [{\n                        selector: '[matBadge]',\n                        inputs: ['disabled: matBadgeDisabled'],\n                        host: {\n                            'class': 'mat-badge',\n                            '[class.mat-badge-overlap]': 'overlap',\n                            '[class.mat-badge-above]': 'isAbove()',\n                            '[class.mat-badge-below]': '!isAbove()',\n                            '[class.mat-badge-before]': '!isAfter()',\n                            '[class.mat-badge-after]': 'isAfter()',\n                            '[class.mat-badge-small]': 'size === \"small\"',\n                            '[class.mat-badge-medium]': 'size === \"medium\"',\n                            '[class.mat-badge-large]': 'size === \"large\"',\n                            '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                            '[class.mat-badge-disabled]': 'disabled',\n                        },\n                    },] }\n        ];\n        /** @nocollapse */\n        MatBadge.ctorParameters = function () { return [\n            { type: core.NgZone },\n            { type: core.ElementRef },\n            { type: a11y.AriaDescriber },\n            { type: core.Renderer2 },\n            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [animations.ANIMATION_MODULE_TYPE,] }] }\n        ]; };\n        MatBadge.propDecorators = {\n            color: [{ type: core.Input, args: ['matBadgeColor',] }],\n            overlap: [{ type: core.Input, args: ['matBadgeOverlap',] }],\n            position: [{ type: core.Input, args: ['matBadgePosition',] }],\n            content: [{ type: core.Input, args: ['matBadge',] }],\n            description: [{ type: core.Input, args: ['matBadgeDescription',] }],\n            size: [{ type: core.Input, args: ['matBadgeSize',] }],\n            hidden: [{ type: core.Input, args: ['matBadgeHidden',] }]\n        };\n        return MatBadge;\n    }(_MatBadgeMixinBase));\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatBadgeModule = /** @class */ (function () {\n        function MatBadgeModule() {\n        }\n        MatBadgeModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [\n                            a11y.A11yModule,\n                            core$1.MatCommonModule\n                        ],\n                        exports: [MatBadge],\n                        declarations: [MatBadge],\n                    },] }\n        ];\n        return MatBadgeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatBadge = MatBadge;\n    exports.MatBadgeModule = MatBadgeModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}