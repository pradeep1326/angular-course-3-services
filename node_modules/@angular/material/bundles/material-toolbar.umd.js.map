{"version":3,"sources":["c:/Users/puttp/Desktop/Angular/workspace/angular-course-3-services/node_modules/@angular/material/bundles/material-toolbar.umd.js"],"names":[],"mappings":"AAAA;uKAC2E;uJACW;oGAChD;wCACnB;;;AAAkD;;;;;;;;;;;;;;;;;;;;SAoB5D;;;;;;;;;;gDAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqCA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASA;;;;;;;;;;;;;;;;;;;;;;SAsBD;;;;;;;;;;;;;gDAOC","file":"material-toolbar.umd.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/core'), require('tslib'), require('@angular/cdk/platform'), require('@angular/common')) :\n    typeof define === 'function' && define.amd ? define('@angular/material/toolbar', ['exports', '@angular/core', '@angular/material/core', 'tslib', '@angular/cdk/platform', '@angular/common'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.toolbar = {}), global.ng.core, global.ng.material.core, global.tslib, global.ng.cdk.platform, global.ng.common));\n}(this, (function (exports, core, core$1, tslib, platform, common) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Boilerplate for applying mixins to MatToolbar.\n    /** @docs-private */\n    var MatToolbarBase = /** @class */ (function () {\n        function MatToolbarBase(_elementRef) {\n            this._elementRef = _elementRef;\n        }\n        return MatToolbarBase;\n    }());\n    var _MatToolbarMixinBase = core$1.mixinColor(MatToolbarBase);\n    var MatToolbarRow = /** @class */ (function () {\n        function MatToolbarRow() {\n        }\n        MatToolbarRow.decorators = [\n            { type: core.Directive, args: [{\n                        selector: 'mat-toolbar-row',\n                        exportAs: 'matToolbarRow',\n                        host: { 'class': 'mat-toolbar-row' },\n                    },] }\n        ];\n        return MatToolbarRow;\n    }());\n    var MatToolbar = /** @class */ (function (_super) {\n        tslib.__extends(MatToolbar, _super);\n        function MatToolbar(elementRef, _platform, document) {\n            var _this = _super.call(this, elementRef) || this;\n            _this._platform = _platform;\n            // TODO: make the document a required param when doing breaking changes.\n            _this._document = document;\n            return _this;\n        }\n        MatToolbar.prototype.ngAfterViewInit = function () {\n            var _this = this;\n            if (!core.isDevMode() || !this._platform.isBrowser) {\n                return;\n            }\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(function () { return _this._checkToolbarMixedModes(); });\n        };\n        /**\n         * Throws an exception when developers are attempting to combine the different toolbar row modes.\n         */\n        MatToolbar.prototype._checkToolbarMixedModes = function () {\n            var _this = this;\n            if (!this._toolbarRows.length) {\n                return;\n            }\n            // Check if there are any other DOM nodes that can display content but aren't inside of\n            // a <mat-toolbar-row> element.\n            var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(function (node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); })\n                .filter(function (node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); })\n                .some(function (node) { return !!(node.textContent && node.textContent.trim()); });\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        };\n        MatToolbar.decorators = [\n            { type: core.Component, args: [{\n                        selector: 'mat-toolbar',\n                        exportAs: 'matToolbar',\n                        template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                        inputs: ['color'],\n                        host: {\n                            'class': 'mat-toolbar',\n                            '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                            '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                        },\n                        changeDetection: core.ChangeDetectionStrategy.OnPush,\n                        encapsulation: core.ViewEncapsulation.None,\n                        styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\\n\"]\n                    }] }\n        ];\n        /** @nocollapse */\n        MatToolbar.ctorParameters = function () { return [\n            { type: core.ElementRef },\n            { type: platform.Platform },\n            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }\n        ]; };\n        MatToolbar.propDecorators = {\n            _toolbarRows: [{ type: core.ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n        };\n        return MatToolbar;\n    }(_MatToolbarMixinBase));\n    /**\n     * Throws an exception when attempting to combine the different toolbar row modes.\n     * @docs-private\n     */\n    function throwToolbarMixedModesError() {\n        throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n            'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n            'inside of a `<mat-toolbar>` for a single row.');\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var MatToolbarModule = /** @class */ (function () {\n        function MatToolbarModule() {\n        }\n        MatToolbarModule.decorators = [\n            { type: core.NgModule, args: [{\n                        imports: [core$1.MatCommonModule],\n                        exports: [MatToolbar, MatToolbarRow, core$1.MatCommonModule],\n                        declarations: [MatToolbar, MatToolbarRow],\n                    },] }\n        ];\n        return MatToolbarModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MatToolbar = MatToolbar;\n    exports.MatToolbarModule = MatToolbarModule;\n    exports.MatToolbarRow = MatToolbarRow;\n    exports.throwToolbarMixedModesError = throwToolbarMixedModesError;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]}