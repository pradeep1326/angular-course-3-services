/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { PortalModule } from '@angular/cdk/portal';
import { CdkStepperModule } from '@angular/cdk/stepper';
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatStepHeader } from './step-header';
import { MatStepLabel } from './step-label';
import { MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper } from './stepper';
import { MatStepperNext, MatStepperPrevious } from './stepper-button';
import { MatStepperIcon } from './stepper-icon';
import { MAT_STEPPER_INTL_PROVIDER } from './stepper-intl';
import * as ɵngcc0 from '@angular/core';
var MatStepperModule = /** @class */ (function () {
    function MatStepperModule() {
    }
MatStepperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatStepperModule });
MatStepperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatStepperModule_Factory(t) { return new (t || MatStepperModule)(); }, providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher], imports: [[
            MatCommonModule,
            CommonModule,
            PortalModule,
            MatButtonModule,
            CdkStepperModule,
            MatIconModule,
            MatRippleModule,
        ],
        MatCommonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatStepperModule, { declarations: function () { return [MatHorizontalStepper,
        MatVerticalStepper,
        MatStep,
        MatStepLabel,
        MatStepper,
        MatStepperNext,
        MatStepperPrevious,
        MatStepHeader,
        MatStepperIcon]; }, imports: function () { return [MatCommonModule,
        CommonModule,
        PortalModule,
        MatButtonModule,
        CdkStepperModule,
        MatIconModule,
        MatRippleModule]; }, exports: function () { return [MatCommonModule,
        MatHorizontalStepper,
        MatVerticalStepper,
        MatStep,
        MatStepLabel,
        MatStepper,
        MatStepperNext,
        MatStepperPrevious,
        MatStepHeader,
        MatStepperIcon]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatStepperModule, [{
        type: NgModule,
        args: [{
                imports: [
                    MatCommonModule,
                    CommonModule,
                    PortalModule,
                    MatButtonModule,
                    CdkStepperModule,
                    MatIconModule,
                    MatRippleModule,
                ],
                exports: [
                    MatCommonModule,
                    MatHorizontalStepper,
                    MatVerticalStepper,
                    MatStep,
                    MatStepLabel,
                    MatStepper,
                    MatStepperNext,
                    MatStepperPrevious,
                    MatStepHeader,
                    MatStepperIcon,
                ],
                declarations: [
                    MatHorizontalStepper,
                    MatVerticalStepper,
                    MatStep,
                    MatStepLabel,
                    MatStepper,
                    MatStepperNext,
                    MatStepperPrevious,
                    MatStepHeader,
                    MatStepperIcon,
                ],
                providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher]
            }]
    }], function () { return []; }, null); })();
    return MatStepperModule;
}());
export { MatStepperModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL3B1dHRwL0Rlc2t0b3AvQW5ndWxhci93b3Jrc3BhY2UvYW5ndWxhci1jb3Vyc2UtMy1zZXJ2aWNlcy9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvbWF0ZXJpYWwvZXNtNS9zdGVwcGVyL3N0ZXBwZXItbW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0tBRUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0RBcUNDIiwiZmlsZSI6InN0ZXBwZXItbW9kdWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBQb3J0YWxNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IENka1N0ZXBwZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvc3RlcHBlcic7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2J1dHRvbic7XG5pbXBvcnQgeyBFcnJvclN0YXRlTWF0Y2hlciwgTWF0Q29tbW9uTW9kdWxlLCBNYXRSaXBwbGVNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcbmltcG9ydCB7IE1hdEljb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9pY29uJztcbmltcG9ydCB7IE1hdFN0ZXBIZWFkZXIgfSBmcm9tICcuL3N0ZXAtaGVhZGVyJztcbmltcG9ydCB7IE1hdFN0ZXBMYWJlbCB9IGZyb20gJy4vc3RlcC1sYWJlbCc7XG5pbXBvcnQgeyBNYXRIb3Jpem9udGFsU3RlcHBlciwgTWF0U3RlcCwgTWF0U3RlcHBlciwgTWF0VmVydGljYWxTdGVwcGVyIH0gZnJvbSAnLi9zdGVwcGVyJztcbmltcG9ydCB7IE1hdFN0ZXBwZXJOZXh0LCBNYXRTdGVwcGVyUHJldmlvdXMgfSBmcm9tICcuL3N0ZXBwZXItYnV0dG9uJztcbmltcG9ydCB7IE1hdFN0ZXBwZXJJY29uIH0gZnJvbSAnLi9zdGVwcGVyLWljb24nO1xuaW1wb3J0IHsgTUFUX1NURVBQRVJfSU5UTF9QUk9WSURFUiB9IGZyb20gJy4vc3RlcHBlci1pbnRsJztcbnZhciBNYXRTdGVwcGVyTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hdFN0ZXBwZXJNb2R1bGUoKSB7XG4gICAgfVxuICAgIE1hdFN0ZXBwZXJNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0czogW1xuICAgICAgICAgICAgICAgICAgICAgICAgTWF0Q29tbW9uTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ29tbW9uTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgUG9ydGFsTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ2RrU3RlcHBlck1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdEljb25Nb2R1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRSaXBwbGVNb2R1bGUsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdENvbW1vbk1vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdEhvcml6b250YWxTdGVwcGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0VmVydGljYWxTdGVwcGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0U3RlcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFN0ZXBMYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFN0ZXBwZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwcGVyTmV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFN0ZXBwZXJQcmV2aW91cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFN0ZXBIZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwcGVySWNvbixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRIb3Jpem9udGFsU3RlcHBlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFZlcnRpY2FsU3RlcHBlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdFN0ZXAsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwcGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0U3RlcHBlck5leHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwcGVyUHJldmlvdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRTdGVwSGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0U3RlcHBlckljb24sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW01BVF9TVEVQUEVSX0lOVExfUFJPVklERVIsIEVycm9yU3RhdGVNYXRjaGVyXSxcbiAgICAgICAgICAgICAgICB9LF0gfVxuICAgIF07XG4gICAgcmV0dXJuIE1hdFN0ZXBwZXJNb2R1bGU7XG59KCkpO1xuZXhwb3J0IHsgTWF0U3RlcHBlck1vZHVsZSB9O1xuIl19